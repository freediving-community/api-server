server:
  port: 0

spring:
  application:
    name: member-service
  datasource:
    url: jdbc:postgresql://localhost:5432/member
    username: postgres
    password: 0000
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        format_sql: true
        show_sql: true

eureka:
  instance:
    hostname: localhost
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    # Eureka 서버 등록
    register-with-eureka: true
    # Eureka 서버로부터 인스턴스 정보를 주기적으로 가져오는 기능
    fetch-registry: true
    # Eureka 서버 위치 등록
    service-url:
      # endpoint 지정
      defaultZone: http://localhost:8761/eureka

feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000

oauth:
  kakao:
    client_id: ${KAKAO_CLIENT_ID}
    redirect_uri: ${KAKAO_REDIRECT_URI}
    client_secret: ${KAKAO_CLIENT_SECRET}
    scope: profile_image, account_email
    code_uri: https://kauth.kakao.com/oauth/authorize
    token_uri: https://kauth.kakao.com/oauth/token
    resource_uri: https://kapi.kakao.com/v2/user/me
  naver:
    client_id: ${NAVER_CLIENT_ID}
    redirect_uri: ${NAVER_REDIRECT_URI}
    client_secret: ${NAVER_CLIENT_SECRET}
    state: ${NAVER_STATE}
    code_uri: https://nid.naver.com/oauth2.0/authorize
    token_uri: https://nid.naver.com/oauth2.0/token
    resource_uri: https://openapi.naver.com/v1/nid/me
  google:
    client_id: ${GOOGLE_CLIENT_ID}
    redirect_uri: ${GOOGLE_REDIRECT_URI}
    client_secret: ${GOOGLE_CLIENT_SECRET}
    scope: https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile
    code_uri: https://accounts.google.com/o/oauth2/v2/auth
    token_uri: https://oauth2.googleapis.com/token
    resource_uri: https://www.googleapis.com/oauth2/v2/userinfo

jwt:
  key: ${JWT_KEY}